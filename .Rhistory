eigen_vals<- eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
# 1 to 1 matching
test <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1])
library(optmatch)
# Create PC data frame
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigen values vector
eigen_vals<- eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
# 1 to 1 matching
test <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1])
# Create eigen values vector
eigen_vals<- eigen_values
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigen values vector
eigen_vals<- eigenvalues_1000G
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
# 1 to 1 matching
test <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1])
test$matches
# Create PC data frame
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
eigenvalues_1000G
# Create eigen values vector
eigen_vals<- eigenvalues_1000G
# Create eigen values vector
eigen_vals<- c(eigenvalues_1000G)$eigen_values
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
# 1 to 1 matching
test <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1])
test$matches
match_maker_output <- if(requireNamespace("pkgname")){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
# 1 to 1 matching
match_maker_output <- if(requireNamespace("optmatch")){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
test$matches
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigen values vector
eigen_vals<- c(eigenvalues_1000G)$eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
match_maker_output <- if(requireNamespace("optmatch")){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
match_maker_output$matches
detach("package:optmatch", unload = TRUE)
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigen values vector
eigen_vals<- c(eigenvalues_1000G)$eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
# 1 to 1 matching
match_maker_output <- if(requireNamespace("optmatch")){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigen values vector
eigen_vals<- c(eigenvalues_1000G)$eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
match_maker_output <- if(requireNamespace("optmatch")){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
library(optmatch)
match_maker_output <- if(requireNamespace("optmatch")){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
detach("package:optmatch", unload = TRUE)
library(optmatch)
# Create PC data frame
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigen values vector
eigen_vals<- c(eigenvalues_1000G)$eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
match_maker_output <- if(requireNamespace("optmatch", quietly = TRUE)){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
remove(match_maker_output)
detach("package:optmatch", unload = TRUE)
match_maker_output <- if(requireNamespace("optmatch", quietly = TRUE)){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
library(optmatch)
devtools::run_examples()
detach("package:optmatch", unload = TRUE)
requireNamespace("optmatch")
# Create PC data frame
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigen values vector
eigen_vals<- c(eigenvalues_1000G)$eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
###################
# Run match_maker #
###################
match_maker_output <- if(requireNamespace("optmatch", quietly = TRUE)){
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
match_maker_output <- if(requireNamespace("optmatch",
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
)
)
match_maker_output <- if(requireNamespace("optmatch",
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
), quietly = TRUE
)
)
match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
match_makker_output <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
requireNamespace("optmatch")
match_makker_output <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
requireNamespace("optmatch"){
match_makker_output <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
}
library(optmatch)
match_maker_output <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
detach("package:optmatch", unload = TRUE)
####### Try again - Take 3 #######
loadNamespace("optmatch")
match_maker_output <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
####### Try again - Take 3 #######
library("optmatch")
relaxinfor()
relaxinfo()
match_maker_output <- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
num_PCs = dim(cov_data)[1]
)
requireNamespace("optmatch")
detach("package:optmatch", unload = TRUE)
requireNamespace("optmatch")
remove.packages("optmatch")
install.packages("optmatch")
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::check_win_devel()
devtools::check_oldrelease()
devtools::check_win_oldrelease()
devtools::check_win_release()
rhub::check_on_ubuntu(email = "timothy.a.myers@gmail.com")
rhub::check_on_debian(email = "timothy.a.myers@gmail.com")
rhub::check_on_fedora(email = "timothy.a.myers@gmail.com")
rhub::check_on_macos(email = "timothy.a.myers@gmail.com")
getwd()
devtools::document()
devtools::document()
head(PCs_1000G)
x <- PCs_1000G
y <- eigenvalues_1000G
head(y)
load("~/R/Rprojects/PCAmatchR/data/eigenvalues_1000G.rda")
head(eigenvalues_1000G0
head(eigenvalues_1000G)
eigenvalues_1000G <- read.delim("/Users/myersta/R/Rprojects/Derek_files/pca_all.eigenval.txt", sep = "\t", header = TRUE)
View(eigenvalues_1000G)
usethis::use_data(eigenvalues_1000G)
usethis::use_data(eigenvalues_1000G, overwrite = TRUE)
View(eigenvalues_1000G)
devtools::document()
eigenvalues_1000G <- read.delim("/Users/myersta/R/Rprojects/Derek_files/eigenvalues.txt", sep = "\t", header = TRUE)
usethis::use_data(eigenvalues_1000G, overwrite = TRUE)
devtools::document()
eigenvalues_all_1000G <- read.delim("/Users/myersta/R/Rprojects/Derek_files/pca_all.eigenval.txt", sep = "\t", header = TRUE)
usethis::use_data(eigenvalues_all_1000G)
devtools::document()
PCs_all_1000G <- read.csv("/Users/myersta/R/Rprojects/Derek_files/pca_all.csv", sep = ",", header = TRUE)
usethis::use_data(PCs_all_1000G)
head(PCs_all_1000G)
devtools::document()
tools::checkRdaFiles()
tools::checkRdaFiles(paths = "/Users/myersta/R/Rprojects/PCAmatchR/data")
usethis::use_data(eigenvalues_all_1000G, compress = "bzip2", version = 2)
usethis::use_data(eigenvalues_all_1000G, compress = "bzip2", version = 2, overwrite = TRUE)
usethis::use_data(PCs_all_1000G, compress = "bzip2", version = 2, overwrite = TRUE)
PCs_all_1000G <- read.csv("/Users/myersta/R/Rprojects/Derek_files/pca_all.csv", sep = ",", header = TRUE)
usethis::use_data(PCs_all_1000G, compress = "bzip2", version = 2, overwrite = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check_win_devel(email = "myersta@mail.nih.gov")
devtools::check_win_devel()
devtools::check_win_devel(email = "myersta@mail.nih.gov")
devtools::check_win_oldrelease(email = "myersta@mail.nih.gov")
devtools::check_win_release(email = "myersta@mail.nih.gov")
rhub::check_for_cran(email = "myersta@mail.nih.gov", show_status = FALSE)
rhub::platforms()
rhub::check(platform = "windows-x86_64-devel", show_status = FALSE)
rhub::check(platform = "fedora-clang-devel", show_status = FALSE)
devtools::revdep(dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
devtools::revdep(dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
devtools::revdep(pkg = "LDlinkR", dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
rhub::platforms()
devtools::check_win_devel(email = "myersta@mail.nih.gov")
devtools::check_win_oldrelease(email = "myersta@mail.nih.gov")
devtools::check_win_release(email = "myersta@mail.nih.gov")
rhub::check_for_cran(email = "myersta@mail.nih.gov", show_status = FALSE)
rhub::check_for_cran(email = "myersta@mail.nih.gov", show_status = FALSE)
load("~/R/Rprojects/PCAmatchR/data/eigenvalues_1000G.rda")
head(eigenvalues_1000G)
devtools::document()
rhub::check_for_cran(email = "myersta@mail.nih.gov", show_status = FALSE)
devtools::document()
devtools::document()
rhub::check_for_cran(email = "myersta@mail.nih.gov", show_status = FALSE)
devtools::document()
devtools::document()
devtools::document()
devtools::check(document = FALSE, vignettes = FALSE)
install.packages("optmatch")
library(optmatch)
devtools::check(document = FALSE, vignettes = FALSE)
devtools::check(document = FALSE, vignettes = FALSE)
devtools::check(document = FALSE, vignettes = FALSE, env_vars = c(_R_CHECK_DONTTEST_EXAMPLES_ = "false"))
devtools::check(document = FALSE, vignettes = FALSE, env_vars = _R_CHECK_DONTTEST_EXAMPLES_ = "false")
devtools::check(document = FALSE, vignettes = FALSE, env_vars = R_CHECK_DONTTEST_EXAMPLES = "false")
devtools::check(document = FALSE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = "false"))
devtools::check(document = FALSE, vignettes = FALSE)
devtools::check(document = FALSE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = "false"))
devtools::check(document = FALSE, vignettes = FALSE)
devtools::check(document = FALSE, vignettes = FALSE)
devtools::load_all(".")
devtools::check(document = FALSE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = FALSE))
devtools::check(document = FALSE, vignettes = FALSE, env_vars = R_CHECK_DONTTEST_EXAMPLES = FALSE)
devtools::load_all(".")
devtools::check(document = FALSE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = FALSE))
devtools::check(document = TRUE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = FALSE))
devtools::check(document = TRUE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = FALSE))
devtools::check(document = TRUE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = FALSE))
devtools::check(document = FALSE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = FALSE))
devtools::check(document = FALSE, vignettes = FALSE, env_vars = c(R_CHECK_DONTTEST_EXAMPLES = TRUE))
devtools::unload(".")
devtools::unload("PCAmatchR")
version
devtools::document()
devtools::load_all(".")
# Create PC data frame by subsetting provided example dataset
pcs <- as.data.frame(PCs_1000G[,c(1,5:24)])
head(pcs)
# Create eigenvalues vector using example dataset
eigen_vals <- c(eigenvalues_1000G)$eigen_values
# Create full eigenvalues vector using example dataset
all_eigen_vals<- c(eigenvalues_all_1000G)$eigen_values
# Create Covarite data frame
cov_data <- PCs_1000G[,c(1:4)]
# Generate a case status variable using ESN 1000 Genome population
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
match_maker_output<- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
eigen_sum = sum(all_eigen_vals),
weight_dist=TRUE
)
# With 1 to 1 matching
library(optmatch)
match_maker_output<- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
eigen_sum = sum(all_eigen_vals),
weight_dist=TRUE
)
match_maker_output
# run plot_maker()
plot_maker(data=match_maker_output,
x_var="PC1",
y_var="PC2",
case_control="case",
line=TRUE)
devtools::unload(PCAmatchR)
devtools::unload("PCAmatchR")
library(devtools)
devtools::revdep_check()
devtools::revdep()
devtools::revdep("PCAmatchR")
install.packages("revdepcheck")
devtools::revdep(pkg = "LDlinkR", dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
install.packages("BiocManager")
devtools::revdep(pkg = "LDlinkR", dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
devtools::revdep(pkg = "optmach", dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
devtools::revdep(pkg = "ggplot2", dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
devtools::revdep(pkg = "PCAmatchR", dependencies = c("Depends", "Imports", "Suggests", "LinkingTo"), bioconductor = TRUE)
devtools::check_win_devel(email = "myersta@mail.nih.gov")
devtools::check_win_oldrelease(email = "myersta@mail.nih.gov")
devtools::check_win_release(email = "myersta@mail.nih.gov")
install.packages("rhub")
rhub::platforms()
rhub::check(platform = "windows-x86_64-devel", show_status = FALSE)
rhub::check(email = "myersta@mail.nih.gov", platform="ubuntu-gcc-release", show_status = FALSE)
rhub::check(email = "myersta@mail.nih.gov", platform="fedora-clang-devel", show_status = FALSE)
version()
version
usethis::use_news_md()
rhub::check(platform="ubuntu-gcc-release", show_status = FALSE)
rhub::check(platform="fedora-clang-devel", show_status = FALSE)
usethis::use_news_md()
devtools::document()
devtools::document()
devtools::check(document = FALSE)
devtools::check()
devtools::release()
devtools::release()
check_rhub()
devtools::release()
devtools::release()
devtools::release()
q()
