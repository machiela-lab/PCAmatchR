m0 <- n-m1
n
m1
m0
distance_matrix <- matrix(NA, m1, n - m1)
rownames(distance_matrix) <- PC_subset_cases[ids][PC_subset_cases[case_control] == 1]
colnames(distance_matrix) <- PC_subset_controls[ids][PC_subset_controls[case_control] == 0]
PC_data<- as.matrix(PC_combine[,-match(c(ids, case_control, "exact_class"), names(PC_combine))])
PC_subset_cases<- as.matrix(PC_subset_cases[,-match(c(ids, case_control, "exact_class"), names(PC_subset_cases))])
PC_subset_controls<- as.matrix(PC_subset_controls[,-match(c(ids, case_control, "exact_class"), names(PC_subset_controls))])
weight_matrix <- matrix(0,dim(PC_data)[2],dim(PC_data)[2])
if(length(eigen_value) >0){
if(length(eigen_sum) >0){
diag(weight_matrix) <- eigen_value/eigen_sum
}
else{
diag(weight_matrix) <- eigen_value/num_PCs
}
} else {
diag(weight_matrix) <- weights
}
cov<- weight_matrix %*% solve(cov(PC_data)) #taken out of loop to speed up computations
weight_output<- as.data.frame(rbind(diag(weight_matrix)))
colnames(weight_output) <- c(paste("w",c(1:dim(PC_data)[2]),sep=""))
for (j in 1:ncol(distance_matrix)){
X<- sweep(PC_subset_cases, 2, PC_subset_controls[j,], "-")
distance_matrix[,j]<- diag(X %*% cov %*% t(X))
}
distance_matrix<- sqrt(distance_matrix)
}
head(distance_matrix)
View(distance_matrix)
match <- optmatch::pairmatch(distance_matrix, data=PC_subset, controls=num_controls, remove.unmatchables=TRUE)
#############
matched<- as.data.frame(cbind(PC_subset, match))
head(matched)
matched<- cbind(PC_subset, match)
head(matched)
typeof(matched)
#############
matched<- as.data.frame(cbind(PC_subset, match))
typeof(matched)
matched<- cbind(PC_subset, match)
typeof(matched)
#############
matched<- as.data.frame(cbind(PC_subset, match))
# Order the data by case status and match
matched_ordered<- matched[order(matched$match, -matched[case_control]),]
head(matched_ordered)
matched<- cbind(PC_subset, match)
matched_ordered<- matched[, order(matched$match, -matched[case_control])]
matched$match
#############
matched<- as.data.frame(cbind(PC_subset, match))
# Order the data by case status and match
matched_ordered<- matched[order(matched$match, -matched[case_control]),]
head(matched_ordered)
head(do.call(order, matched))
head(matched[do.call(order, matched),])
# Order the data by case status and match
matched_ordered<- matched[order(matched$match, -matched[case_control]),]
head(matched_ordered)
head(matched)
head(matched[do.call(order, matched[case_control]),])
head(matched[do.call(order, -matched[case_control]),])
-matched[case_control]
case_control
eval(case_control)
#############
matched<- as.data.frame(cbind(PC_subset, match))
# Order the data by case status and match
matched_ordered<- matched[order(matched$match, -matched[case_control]),]
head(matched_ordered)
head(matched[order(match, -eval(case_control),])
#############
matched<- as.data.frame(cbind(PC_subset, match))
match
head(matched_ordered)
head(matched)
matched$match2<-matched$match
#############
matched<- as.data.frame(cbind(PC_subset, match))
matched$match2<-matched$match
head(matched[order(match2, -eval(case_control),])
head(matched[order(match2, -eval(case_control)),])
#############
matched<- as.data.frame(cbind(PC_subset, match))
head(matched)
head(matched[with(matched, order(match)), ])
head(matched[with(matched, order(match, case_control)), ])
head(matched[with(matched, order(match, -eval(case_control))), ])
eval(case_control)
paste(eval(case_control)
)
(eval(case_control))
head(matched[with(matched, order(match, -(eval(case_control))), ])
head(matched[with(matched, order(match, -(eval(case_control)))), ])
as.name(case_control)
head(matched[with(matched, order(match, -(as.name(case_control)))), ])
head(matched[with(matched, order(match, -(eval(as.name(case_control)))), ])
head(matched[with(matched, order(match, -(eval(as.name(case_control))))), ])
head(matched[with(matched, order(match, -((as.name(case_control))))), ])
#############
matched<- as.data.frame(cbind(PC_subset, match))
# Order the data by case status and match
matched_ordered<- matched[order(matched$match, -matched[case_control]),]
head(matched_ordered)
head(order(-PC_combine[case_control]))
head(sort(-(unlist(PC_combine[case_control] , use.names = FALSE)), index.retur=TRUE)$ix) # use this....
library(PCAmatchR)
# Create PC data frame
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigenvalues vector
eigen_vals<- c(eigenvalues_1000G)$eigen_values
# Create full eigenvalues vector
all_eigen_vals<- c(eigenvalues_all_1000G)$eigen_values
# Create Covarite data frame
cov_data<- PCs_1000G[,c(1:4)]
# Generate a case status variable
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
library(optmatch)
PC = pcs
eigen_value = eigen_vals
data = cov_data
ids = c("sample")
case_control = c("case")
num_controls = 1
eigen_sum = sum(all_eigen_vals)
sum(all_eigen_vals)
weight_dist=TRUE
is.null(exact_match)
exact_match=NULL
if(is.null(exact_match)){
exact_class <- rep(1,nrow(data))
} else if (length(exact_match) !=0){
exact_class<- do.call(paste, c(data[exact_match], sep=""))
}
PC_combine1<- as.data.frame(cbind(data, exact_class))
PC_combine<- merge(PC, PC_combine1[c(ids, case_control, "exact_class")], by=ids)
rownames(PC_combine)<- PC_combine[[ids]]
PC_combine<- PC_combine[order(-PC_combine[case_control]),]
PC_combine1<- as.data.frame(cbind(data, exact_class))
PC_combine<- merge(PC, PC_combine1[c(ids, case_control, "exact_class")], by=ids)
rownames(PC_combine)<- PC_combine[[ids]]
head(PC_combine)
dim(PC_combine)
head(PC_combine[order(-PC_combine[case_control]),])
PC_combine[case_control]
head(order(-PC_combine[case_control]))
typeof(PC_combine)
head(sort(-(unlist(PC_combine[case_control] , use.names = FALSE)), index.retur=TRUE)$ix) # use this....
head(sort.list(-(unlist(PC_combine[case_control] , use.names = FALSE))))
head(PC_combine)
head(PC_combine[order(-PC_combine[case_control]),])
head(PC_combine[sort(-(unlist(PC_combine[case_control] , use.names = FALSE)), index.retur=TRUE)$ix])
head(sort(-(unlist(PC_combine[case_control] , use.names = FALSE)), index.retur=TRUE)$ix) # use this....
head(order(-PC_combine[case_control]))
order(-PC_combine[case_control])
sort(-(unlist(PC_combine[case_control] , use.names = FALSE)), index.retur=TRUE)$ix
head(PC_combine[order(-PC_combine[case_control]),])
head(PC_combine[(sort(-(unlist(PC_combine[case_control] , use.names = FALSE)), index.retur=TRUE)$ix),])
PC_combine1<- as.data.frame(cbind(data, exact_class))
PC_combine<- merge(PC, PC_combine1[c(ids, case_control, "exact_class")], by=ids)
rownames(PC_combine)<- PC_combine[[ids]]
PC_combine<- PC_combine[(sort(-(unlist(PC_combine[case_control] , use.names = FALSE)), index.retur=TRUE)$ix),]
head(PC_combine)
dim(PC_combine)
levels(as.factor(PC_combine$exact_class))
#############
k="1"
PC_subset<- PC_combine[which(PC_combine$exact_class==k),]
PC_subset_cases    <- PC_subset[PC_subset[case_control] == 1,]
PC_subset_controls <- PC_subset[PC_subset[case_control] == 0,]
n <- dim(PC_subset)[1]
m1 <- sum(PC_subset[case_control])
m0 <- n-m1
distance_matrix <- matrix(NA, m1, n - m1)
rownames(distance_matrix) <- PC_subset_cases[ids][PC_subset_cases[case_control] == 1]
colnames(distance_matrix) <- PC_subset_controls[ids][PC_subset_controls[case_control] == 0]
# Fill distance matrix with Mahalanobis distance
# Un-weighted Mahalanobis distance
if(weight_dist==FALSE){
PC_data<- as.matrix(PC_combine[,-match(c(ids, case_control, "exact_class"), names(PC_combine))])
PC_subset_cases<- as.matrix(PC_subset_cases[,-match(c(ids, case_control, "exact_class"), names(PC_subset_cases))])
PC_subset_controls<- as.matrix(PC_subset_controls[,-match(c(ids, case_control, "exact_class"), names(PC_subset_controls))])
cov<- solve(cov(PC_data)) #taken out of loop to speed up computations, based on all PCs
weight_output<- NULL
for (j in 1:ncol(distance_matrix)){
X<- sweep(PC_subset_cases, 2, PC_subset_controls[j,], "-")
distance_matrix[,j]<- diag(X %*% cov %*% t(X))
}
distance_matrix<- sqrt(distance_matrix)
} else{
# Weighted Mahalanobis distance
PC_data<- as.matrix(PC_combine[,-match(c(ids, case_control, "exact_class"), names(PC_combine))])
PC_subset_cases<- as.matrix(PC_subset_cases[,-match(c(ids, case_control, "exact_class"), names(PC_subset_cases))])
PC_subset_controls<- as.matrix(PC_subset_controls[,-match(c(ids, case_control, "exact_class"), names(PC_subset_controls))])
weight_matrix <- matrix(0,dim(PC_data)[2],dim(PC_data)[2])
if(length(eigen_value) >0){
if(length(eigen_sum) >0){
diag(weight_matrix) <- eigen_value/eigen_sum
}
else{
diag(weight_matrix) <- eigen_value/num_PCs
}
} else {
diag(weight_matrix) <- weights
}
cov<- weight_matrix %*% solve(cov(PC_data)) #taken out of loop to speed up computations
weight_output<- as.data.frame(rbind(diag(weight_matrix)))
colnames(weight_output) <- c(paste("w",c(1:dim(PC_data)[2]),sep=""))
for (j in 1:ncol(distance_matrix)){
X<- sweep(PC_subset_cases, 2, PC_subset_controls[j,], "-")
distance_matrix[,j]<- diag(X %*% cov %*% t(X))
}
distance_matrix<- sqrt(distance_matrix)
}
# Create Matches
match <- optmatch::pairmatch(distance_matrix, data=PC_subset, controls=num_controls, remove.unmatchables=TRUE)
head(match)
match
dim(match)
length(match)
matched<- as.data.frame(cbind(PC_subset, match))
head(matched)
head(matched[order(matched$match, -matched[case_control]),])
head(matched[order(matched$match, -matched[case_control]),])
head(matched[with(matched, order(match, -(eval(as.name(case_control))))), ])  # use this.....
as.name(case_control)
head(matched[order(matched$match, -matched[case_control]),])
head(matched[with(matched, order(match, -(eval(as.name(case_control))))), ])  # use this.....
matched<- as.data.frame(cbind(PC_subset, match))
# Order the data by case status and match
matched_ordered<- matched[with(matched, order(match, -(eval(as.name(case_control))))), ]
# Remove records with no match
matched_ordered2<- matched_ordered[which(!is.na(matched_ordered$match)),]
matched_distance<- c()
for (l in levels(matched_ordered2$match)){
dis_id<- matched_ordered2[ids][matched_ordered2["match"] == as.character(l)]
invisible(capture.output(dis_values<-distance_matrix[dput(as.character(dis_id[1])),dput(as.character(dis_id[-1]))]))
matched_distance<- c(matched_distance, 0, dis_values)
}
matched_ordered2$match_distance<- matched_distance
# Combine class matches
matched_ordered2$match_class<- paste(matched_ordered2$exact_class, matched_ordered2$match, sep="-")
# Save Final Matches
matched_results[[k]]<- matched_ordered2
# Create Loop for exact matching
matched_results<- list()
matched<- as.data.frame(cbind(PC_subset, match))
# Order the data by case status and match
matched_ordered<- matched[with(matched, order(match, -(eval(as.name(case_control))))), ]
# Remove records with no match
matched_ordered2<- matched_ordered[which(!is.na(matched_ordered$match)),]
# Pull match distance
matched_distance<- c()
for (l in levels(matched_ordered2$match)){
dis_id<- matched_ordered2[ids][matched_ordered2["match"] == as.character(l)]
invisible(capture.output(dis_values<-distance_matrix[dput(as.character(dis_id[1])),dput(as.character(dis_id[-1]))]))
matched_distance<- c(matched_distance, 0, dis_values)
}
matched_ordered2$match_distance<- matched_distance
# Combine class matches
matched_ordered2$match_class<- paste(matched_ordered2$exact_class, matched_ordered2$match, sep="-")
# Save Final Matches
matched_results[[k]]<- matched_ordered2
matches_final<- do.call(rbind, matched_results)
matches_final$match_final<- cumsum(!duplicated( matches_final[ncol(matches_final)]))
merged_matches<- merge(data,  matches_final[c(ids, "exact_class", "match_final", "match_distance")], by=ids)
head(merged_matches)
head(merged_matches[order(merged_matches$match_final, -merged_matches[case_control]),])
case_control
head(merged_matches[order(merged_matches$match_final, -merged_matches[case_control]),])
head(merged_matches[with(merged_matches, order(match_final, -(eval(as.name(case_control))))), ])
merged_matches<- merged_matches[with(merged_matches, order(match_final, -(eval(as.name(case_control))))), ]
rownames(merged_matches)<- 1:nrow(merged_matches)
colnames(merged_matches)[colnames(merged_matches) == "exact_class"] <- "match_strata"
head(merged_matches)
###########
# Merge matches with PC data
merged_PC<- merge(merged_matches, PC, by=ids)
head(merged_PC)
head(merged_PC[order(merged_PC$match_final, -merged_PC[case_control]),])
head(merged_PC)
head(merged_PC[with(merged_PC, order(match_final, -(eval(as.name(case_control))))), ]) # use this...
head(merged_PC[order(merged_PC$match_final, -merged_PC[case_control]),])
# Merge matches with PC data
merged_PC<- merge(merged_matches, PC, by=ids)
merged_PC<- merged_PC[with(merged_PC, order(match_final, -(eval(as.name(case_control))))), ]
rownames(merged_PC)<- 1:nrow(merged_PC)
head(merged_PC)
library(PCAmatchR)
# Create PC data frame by subsetting provided example dataset
pcs <- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigenvalues vector using example dataset
eigen_vals <- c(eigenvalues_1000G)$eigen_values
# Create full eigenvalues vector using example dataset
all_eigen_vals<- c(eigenvalues_all_1000G)$eigen_values
# Create Covarite data frame
cov_data <- PCs_1000G[,c(1:4)]
# Generate a case status variable using ESN 1000 Genome population
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
# With 1 to 1 matching
if(!requireNamespace("optmatch", quietly = TRUE)){
match_maker_output<- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
eigen_sum = sum(all_eigen_vals),
weight_dist=TRUE
)
}
head(match_maker_output)
match_maker_output<- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
eigen_sum = sum(all_eigen_vals),
weight_dist=TRUE
)
!requireNamespace("optmatch", quietly = TRUE)
!requireNamespace("optmatch", quietly = TRUE))
!requireNamespace("optmatch", quietly = TRUE)
requireNamespace
rcbalance
rcbalance()
library(rcbalance)
rcbalance()
rcbalance
# Create PC data frame by subsetting provided example dataset
pcs <- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigenvalues vector using example dataset
eigen_vals <- c(eigenvalues_1000G)$eigen_values
# Create full eigenvalues vector using example dataset
all_eigen_vals<- c(eigenvalues_all_1000G)$eigen_values
# Create Covarite data frame
cov_data <- PCs_1000G[,c(1:4)]
# Generate a case status variable using ESN 1000 Genome population
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
# With 1 to 1 matching
library(optmatch)
match_maker_output<- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
eigen_sum = sum(all_eigen_vals),
weight_dist=TRUE
)
head(match_maker_output)
plot_maker(data=match_maker_output,
x_var="PC1",
y_var="PC2",
case_control="case",
line=T)
library(PCAmatchR)
# Create PC data frame by subsetting provided example dataset
pcs <- as.data.frame(PCs_1000G[,c(1,5:24)])
# Create eigenvalues vector using example dataset
eigen_vals <- c(eigenvalues_1000G)$eigen_values
# Create full eigenvalues vector using example dataset
all_eigen_vals<- c(eigenvalues_all_1000G)$eigen_values
# Create Covarite data frame
cov_data <- PCs_1000G[,c(1:4)]
# Generate a case status variable using ESN 1000 Genome population
cov_data$case <- ifelse(cov_data$pop=="ESN", c(1), c(0))
# With 1 to 1 matching
library(optmatch)
match_maker_output<- match_maker(PC = pcs,
eigen_value = eigen_vals,
data = cov_data,
ids = c("sample"),
case_control = c("case"),
num_controls = 1,
eigen_sum = sum(all_eigen_vals),
weight_dist=TRUE
)
plot_maker(data=match_maker_output,
x_var="PC1",
y_var="PC2",
case_control="case",
line=T)
library(PCAmatchR)
library(optmatch)
# Read-in PLINK PCA dataset
data1<- PCs_1000G[,c(1:4)]
eigen_vals<- c(eigenvalues_1000G)$eigen_values
# Create PC data
pcs<- as.data.frame(PCs_1000G[,c(1,5:24)])
# Test PCAmatchR
# Prepare input files
data1$case <- ifelse(data1$pop=="CEU", c(1), c(0))
table(data1$case,data1$pop)
table(data1$pop)
# Run PCAmatchR
out1 <- match_maker(PC=pcs[,1:6],
data=data1,
eigen_value=eigen_vals[1:5],
ids="sample",
case_control="case",
weight_dist=T,
num_PCs=dim(data1)[1],
num_controls=1)
plot_maker(data=out1, x_var="PC1", y_var="PC2", case_control="case", line=F)
out1$matches
rel <- read.table("C:/Users/browndw2/Desktop/PCAmatchR/1000 Genome/Analysis 2/plink2.rel", as.is=T, header=F, sep="\t")
rel_names <- read.table("C:/Users/browndw2/Desktop/PCAmatchR/1000 Genome/Analysis 2/plink2.rel.id", as.is=T, header=F, sep="\t")
#########################
# Relatedness Functions #
#########################
# Calculate pairwise relatedness
pair_rel <- function(id1,id2)
{
return(rel[match(id1,rel_names[,1]), match(id2,rel_names[,1])])
}
#pair_rel(id1="NA19663", id2="HG01965")
# Calculate overall relatedness
related <- function(data=NULL, id=NULL, case_control=NULL){
rels <- rep("NA",table(data$matches[case_control])[[1]])
pair <- 0
count <- 1
for (i in 1:length(data$matches[,1])) {
if (data$matches$match_final[i]!=pair){
pair <- data$matches$match_final[i]
case_id <- data$matches[,id][i]
} else {
rel_val <- pair_rel(case_id,data$matches[,id][i])
rels[count] <- abs(rel_val)
count=count+1
}
}
return(rels)
}
#r <- related(data=out1, id="sample", case_control="case")
#################
# Data Analysis #
#################
relatedness<- list()
for(k in levels(data1$pop)){
data1$case <- ifelse(data1$pop==k, c(1), c(0))
case_var <- "case"
out_n <- match_maker(PC=pcs,
data=data1,
eigen_value=eigen_vals,
ids="sample",
case_control=case_var,
weight_dist=F,
num_PCs=dim(data1)[1],
num_controls=1)
rel_n <- related(data=out_n, id="sample", case_control=case_var)
out_w <- match_maker(PC=pcs,
data=data1,
eigen_value=eigen_vals,
ids="sample",
case_control=case_var,
weight_dist=T,
num_PCs=dim(data1)[1],
num_controls=1)
rel_w <- related(data=out_w, id="sample", case_control=case_var)
t<-t.test(as.numeric(rel_n),as.numeric(rel_w))
case_num  <- sum(data1[case_var])
related_un<- mean(as.numeric(rel_n))
related_un.sd<- sd(as.numeric(rel_n))
related_w <- mean(as.numeric(rel_w))
related_w.sd <- sd(as.numeric(rel_w))
status    <- ifelse(mean(as.numeric(rel_n)) < mean(as.numeric(rel_w)),1,0)
p_value<-t.test(as.numeric(rel_n),as.numeric(rel_w))$p.value
relatedness[[k]]<- cbind(k, case_num, related_un, related_un.sd, related_w, related_w.sd, status, p_value)
}
relatedness_final<- as.data.frame(do.call(rbind, relatedness))
table(relatedness_final$status)
relatedness_final
setMaxProblemSize(size = Inf)
# Read-in PLINK PCA dataset
data1<- read.csv(file="Z:/myelofibrosis/GWAS/matching/EUR_ancestry.csv", header=TRUE)
remove<- read.csv(file="Z:/myelofibrosis/GWAS/matching/sex_discordant.csv", header=TRUE)
eigen_vals<- read.table(file="Z:/myelofibrosis/GWAS/pca/filtered/plink_pca.eigenval", header= FALSE)
eigen_vals_final<- eigen_vals$V1
eigen_vals_final
# Create PC data
pcs<- read.table(file="Z:/myelofibrosis/GWAS/pca/filtered/plink_pca.eigenvec", header= FALSE)
colnames(pcs)<- c("FID","ID","PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10","PC11","PC12","PC13","PC14","PC15","PC16","PC17","PC18","PC19","PC20")
pcs_final<- pcs[,-1]
head(pcs_final)
dim(pcs_final)
# Create final CaCo data
remove_records<- c(as.character(remove$Sample_ID))
data<- data1[!(data1$ID %in% remove_records), ]
data_final<- data[,c(1,2,9)]
head(data_final)
dim(data_final)
table(data_final$CaCo)
# Run PCAmatchR
out1 <- match_maker(PC=pcs_final,
data=data_final,
eigen_value=eigen_vals_final,
ids="ID",
case_control="CaCo",
weight_dist=T,
eigen_sum = 57992.4374120,
num_controls=5)
head(out1[,1:5])
head(out1$PC_matches[,1:5])
head(out1$PC_matches[,1:6])
(out1$PC_matches[1:20,1:6])
library(PCAmatchR)
devtools::check(vignettes = FALSE)
